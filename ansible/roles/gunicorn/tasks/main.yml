- name: "Gunicorn - {{ app_folder }}"
  meta: end_host
  when:
  - app_folder is not defined
  - app_name is not defined

- name: "Gunicorn - {{ app_folder }} - ensure local reverse is setup"
  apt:
    pkg:
    - nginx
  become: true

- name: "Gunicorn - {{ app_folder }} - remove nginx default se"
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  become: True

- name: "Gunicorn - {{ app_folder }} - remove nginx default sa"
  file:
    path: /etc/nginx/sites-available/default
    state: absent
  become: True

- name: "Gunicorn - {{ app_folder }} - flask install in venv"
  pip:
    name: flask
    virtualenv: "/home/{{ ruser }}/{{ app_folder }}/venv"
  become: true
  become_user: "{{ ruser }}"

- name: "Gunicorn - {{ app_folder }} - gunicorn install in venv"
  pip:
    name: gunicorn
    virtualenv: "/home/{{ ruser }}/{{ app_folder }}/venv"
  become: true
  become_user: "{{ ruser }}"

- name: "Gunicorn - {{ app_folder }} - requests install in venv"
  pip:
    name: requests
    virtualenv: "/home/{{ ruser }}/{{ app_folder }}/venv"
  become: true
  become_user: "{{ ruser }}"

- name: "Gunicorn - {{ app_folder }} - copy nginx_proxy.conf"
  copy:
    src: vars/nginx_proxy.conf
    dest: "/etc/nginx/sites-available/{{ app_name }}"
    mode: 0755
  become: true

- name: "Gunicorn - {{ app_folder }} - symlink nginx se sa"
  file:
    src: "/etc/nginx/sites-available/{{ app_name }}"
    dest: "/etc/nginx/sites-enabled/{{ app_name }}"
    state: link
  become: True

- name: "Gunicorn - {{ app_folder }} - replace user_placeholder nginx virtualhost"
  replace:
    path: "/etc/nginx/sites-available/{{ app_name }}"
    regexp: 'user_placeholder'
    replace: '{{ ruser }}'
  become: true

- name: "Gunicorn - {{ app_folder }} - replace app_folder nginx virtualhost"
  replace:
    path: "/etc/nginx/sites-available/{{ app_name }}"
    regexp: 'app_folder'
    replace: '{{ app_folder }}'
  become: true

- name: "Gunicorn - {{ app_folder }} - replace app_name"
  replace:
    path: "/etc/nginx/sites-available/{{ app_name }}"
    regexp: 'app_name'
    replace: '{{ app_name }}'
  become: true

- name: "Gunicorn - {{ app_folder }} - Check that /home/{{ ruser }}/{{ app_folder }}/{{ app_name }} exists"
  stat:
    path: "/home/{{ ruser }}/{{ app_folder }}/{{ app_name }}.py"
  register: app

- name: "Gunicorn - {{ app_folder }} - wsgi.py in {{ app_folder }}"
  copy:
    src: vars/webservice/wsgi.py
    dest: "/home/{{ ruser }}/{{ app_folder }}"
    mode: 0644
    group: "{{ ruser }}"
    owner: "{{ ruser }}"
  become: true
  when: app.stat.exists

- name: "Gunicorn - {{ app_folder }} - replace app placeholder"
  replace:
    path: "/home/{{ ruser }}/{{ app_folder }}/wsgi.py"
    regexp: 'app_placeholder'
    replace: '{{ app_name }}'
  become: true
  when: app.stat.exists

- name: "Gunicorn - {{ app_folder }} - Registering {{ app_name }} service"
  copy:
    src: vars/webservice/service
    dest: "/etc/systemd/system/{{ app_name }}.service"
    mode: 0644
  become: true
  when: app.stat.exists


- name: "Gunicorn - {{ app_folder }} - replace user placeholders"
  replace:
    path: "/etc/systemd/system/{{ app_name }}.service"
    regexp: 'user_placeholder'
    replace: '{{ ruser }}'
  become: true
  when: app.stat.exists

- name: "Gunicorn - {{ app_folder }} - replace app_folder placeholder"
  replace:
    path: "/etc/systemd/system/{{ app_name }}.service"
    regexp: 'app_folder'
    replace: '{{ app_folder }}'
  become: true
  when: app.stat.exists

- name: "Gunicorn - {{ app_folder }} - replace app placeholders"
  replace:
    path: "/etc/systemd/system/{{ app_name }}.service"
    regexp: 'app_name'
    replace: '{{ app_name }}'
  become: true
  when: app.stat.exists

- name: "Gunicorn - {{ app_folder }} - {{ app_name }}.service Daemon-reload"
  systemd:
    name: "{{ app_name }}"
    state: started
    enabled: yes
    daemon_reload: yes
  become: true
  when: app.stat.exists
